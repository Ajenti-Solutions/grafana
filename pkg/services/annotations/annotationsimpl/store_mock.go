// Code generated by mockery v2.37.1. DO NOT EDIT.

package annotationsimpl

import (
	annotations "github.com/grafana/grafana/pkg/services/annotations"
	accesscontrol "github.com/grafana/grafana/pkg/services/annotations/accesscontrol"

	context "context"

	mock "github.com/stretchr/testify/mock"

	setting "github.com/grafana/grafana/pkg/setting"
)

// fakeStore is an autogenerated mock type for the store type
type fakeStore struct {
	mock.Mock
}

type fakeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *fakeStore) EXPECT() *fakeStore_Expecter {
	return &fakeStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, items
func (_m *fakeStore) Add(ctx context.Context, items *annotations.Item) error {
	ret := _m.Called(ctx, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.Item) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// fakeStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type fakeStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - items *annotations.Item
func (_e *fakeStore_Expecter) Add(ctx interface{}, items interface{}) *fakeStore_Add_Call {
	return &fakeStore_Add_Call{Call: _e.mock.On("Add", ctx, items)}
}

func (_c *fakeStore_Add_Call) Run(run func(ctx context.Context, items *annotations.Item)) *fakeStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*annotations.Item))
	})
	return _c
}

func (_c *fakeStore_Add_Call) Return(_a0 error) *fakeStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *fakeStore_Add_Call) RunAndReturn(run func(context.Context, *annotations.Item) error) *fakeStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddMany provides a mock function with given fields: ctx, items
func (_m *fakeStore) AddMany(ctx context.Context, items []annotations.Item) error {
	ret := _m.Called(ctx, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []annotations.Item) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// fakeStore_AddMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMany'
type fakeStore_AddMany_Call struct {
	*mock.Call
}

// AddMany is a helper method to define mock.On call
//   - ctx context.Context
//   - items []annotations.Item
func (_e *fakeStore_Expecter) AddMany(ctx interface{}, items interface{}) *fakeStore_AddMany_Call {
	return &fakeStore_AddMany_Call{Call: _e.mock.On("AddMany", ctx, items)}
}

func (_c *fakeStore_AddMany_Call) Run(run func(ctx context.Context, items []annotations.Item)) *fakeStore_AddMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]annotations.Item))
	})
	return _c
}

func (_c *fakeStore_AddMany_Call) Return(_a0 error) *fakeStore_AddMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *fakeStore_AddMany_Call) RunAndReturn(run func(context.Context, []annotations.Item) error) *fakeStore_AddMany_Call {
	_c.Call.Return(run)
	return _c
}

// CleanAnnotations provides a mock function with given fields: ctx, cfg, annotationType
func (_m *fakeStore) CleanAnnotations(ctx context.Context, cfg setting.AnnotationCleanupSettings, annotationType string) (int64, error) {
	ret := _m.Called(ctx, cfg, annotationType)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, setting.AnnotationCleanupSettings, string) (int64, error)); ok {
		return rf(ctx, cfg, annotationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, setting.AnnotationCleanupSettings, string) int64); ok {
		r0 = rf(ctx, cfg, annotationType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, setting.AnnotationCleanupSettings, string) error); ok {
		r1 = rf(ctx, cfg, annotationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fakeStore_CleanAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanAnnotations'
type fakeStore_CleanAnnotations_Call struct {
	*mock.Call
}

// CleanAnnotations is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg setting.AnnotationCleanupSettings
//   - annotationType string
func (_e *fakeStore_Expecter) CleanAnnotations(ctx interface{}, cfg interface{}, annotationType interface{}) *fakeStore_CleanAnnotations_Call {
	return &fakeStore_CleanAnnotations_Call{Call: _e.mock.On("CleanAnnotations", ctx, cfg, annotationType)}
}

func (_c *fakeStore_CleanAnnotations_Call) Run(run func(ctx context.Context, cfg setting.AnnotationCleanupSettings, annotationType string)) *fakeStore_CleanAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(setting.AnnotationCleanupSettings), args[2].(string))
	})
	return _c
}

func (_c *fakeStore_CleanAnnotations_Call) Return(_a0 int64, _a1 error) *fakeStore_CleanAnnotations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *fakeStore_CleanAnnotations_Call) RunAndReturn(run func(context.Context, setting.AnnotationCleanupSettings, string) (int64, error)) *fakeStore_CleanAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// CleanOrphanedAnnotationTags provides a mock function with given fields: ctx
func (_m *fakeStore) CleanOrphanedAnnotationTags(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fakeStore_CleanOrphanedAnnotationTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanOrphanedAnnotationTags'
type fakeStore_CleanOrphanedAnnotationTags_Call struct {
	*mock.Call
}

// CleanOrphanedAnnotationTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *fakeStore_Expecter) CleanOrphanedAnnotationTags(ctx interface{}) *fakeStore_CleanOrphanedAnnotationTags_Call {
	return &fakeStore_CleanOrphanedAnnotationTags_Call{Call: _e.mock.On("CleanOrphanedAnnotationTags", ctx)}
}

func (_c *fakeStore_CleanOrphanedAnnotationTags_Call) Run(run func(ctx context.Context)) *fakeStore_CleanOrphanedAnnotationTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *fakeStore_CleanOrphanedAnnotationTags_Call) Return(_a0 int64, _a1 error) *fakeStore_CleanOrphanedAnnotationTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *fakeStore_CleanOrphanedAnnotationTags_Call) RunAndReturn(run func(context.Context) (int64, error)) *fakeStore_CleanOrphanedAnnotationTags_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, params
func (_m *fakeStore) Delete(ctx context.Context, params *annotations.DeleteParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.DeleteParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// fakeStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type fakeStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - params *annotations.DeleteParams
func (_e *fakeStore_Expecter) Delete(ctx interface{}, params interface{}) *fakeStore_Delete_Call {
	return &fakeStore_Delete_Call{Call: _e.mock.On("Delete", ctx, params)}
}

func (_c *fakeStore_Delete_Call) Run(run func(ctx context.Context, params *annotations.DeleteParams)) *fakeStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*annotations.DeleteParams))
	})
	return _c
}

func (_c *fakeStore_Delete_Call) Return(_a0 error) *fakeStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *fakeStore_Delete_Call) RunAndReturn(run func(context.Context, *annotations.DeleteParams) error) *fakeStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, query, accessResources
func (_m *fakeStore) Get(ctx context.Context, query *annotations.ItemQuery, accessResources *accesscontrol.AccessResources) ([]*annotations.ItemDTO, error) {
	ret := _m.Called(ctx, query, accessResources)

	var r0 []*annotations.ItemDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.ItemQuery, *accesscontrol.AccessResources) ([]*annotations.ItemDTO, error)); ok {
		return rf(ctx, query, accessResources)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.ItemQuery, *accesscontrol.AccessResources) []*annotations.ItemDTO); ok {
		r0 = rf(ctx, query, accessResources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*annotations.ItemDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *annotations.ItemQuery, *accesscontrol.AccessResources) error); ok {
		r1 = rf(ctx, query, accessResources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fakeStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type fakeStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - query *annotations.ItemQuery
//   - accessResources *accesscontrol.AccessResources
func (_e *fakeStore_Expecter) Get(ctx interface{}, query interface{}, accessResources interface{}) *fakeStore_Get_Call {
	return &fakeStore_Get_Call{Call: _e.mock.On("Get", ctx, query, accessResources)}
}

func (_c *fakeStore_Get_Call) Run(run func(ctx context.Context, query *annotations.ItemQuery, accessResources *accesscontrol.AccessResources)) *fakeStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*annotations.ItemQuery), args[2].(*accesscontrol.AccessResources))
	})
	return _c
}

func (_c *fakeStore_Get_Call) Return(_a0 []*annotations.ItemDTO, _a1 error) *fakeStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *fakeStore_Get_Call) RunAndReturn(run func(context.Context, *annotations.ItemQuery, *accesscontrol.AccessResources) ([]*annotations.ItemDTO, error)) *fakeStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function with given fields: ctx, query
func (_m *fakeStore) GetTags(ctx context.Context, query *annotations.TagsQuery) (annotations.FindTagsResult, error) {
	ret := _m.Called(ctx, query)

	var r0 annotations.FindTagsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.TagsQuery) (annotations.FindTagsResult, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.TagsQuery) annotations.FindTagsResult); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(annotations.FindTagsResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *annotations.TagsQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fakeStore_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type fakeStore_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - query *annotations.TagsQuery
func (_e *fakeStore_Expecter) GetTags(ctx interface{}, query interface{}) *fakeStore_GetTags_Call {
	return &fakeStore_GetTags_Call{Call: _e.mock.On("GetTags", ctx, query)}
}

func (_c *fakeStore_GetTags_Call) Run(run func(ctx context.Context, query *annotations.TagsQuery)) *fakeStore_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*annotations.TagsQuery))
	})
	return _c
}

func (_c *fakeStore_GetTags_Call) Return(_a0 annotations.FindTagsResult, _a1 error) *fakeStore_GetTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *fakeStore_GetTags_Call) RunAndReturn(run func(context.Context, *annotations.TagsQuery) (annotations.FindTagsResult, error)) *fakeStore_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, item
func (_m *fakeStore) Update(ctx context.Context, item *annotations.Item) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *annotations.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// fakeStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type fakeStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - item *annotations.Item
func (_e *fakeStore_Expecter) Update(ctx interface{}, item interface{}) *fakeStore_Update_Call {
	return &fakeStore_Update_Call{Call: _e.mock.On("Update", ctx, item)}
}

func (_c *fakeStore_Update_Call) Run(run func(ctx context.Context, item *annotations.Item)) *fakeStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*annotations.Item))
	})
	return _c
}

func (_c *fakeStore_Update_Call) Return(_a0 error) *fakeStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *fakeStore_Update_Call) RunAndReturn(run func(context.Context, *annotations.Item) error) *fakeStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// newFakeStore creates a new instance of fakeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newFakeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *fakeStore {
	mock := &fakeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
