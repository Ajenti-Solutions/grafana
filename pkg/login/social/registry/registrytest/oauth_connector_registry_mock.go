// Code generated by mockery v2.27.1. DO NOT EDIT.

package registrytest

import (
	connector "github.com/grafana/grafana/pkg/login/social/connector"
	mock "github.com/stretchr/testify/mock"
)

// MockOAuthConnectorRegistry is an autogenerated mock type for the OAuthConnectorRegistry type
type MockOAuthConnectorRegistry struct {
	mock.Mock
}

// Get provides a mock function with given fields: name
func (_m *MockOAuthConnectorRegistry) Get(name string) (*connector.SocialConnector, bool) {
	ret := _m.Called(name)

	var r0 *connector.SocialConnector
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*connector.SocialConnector, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *connector.SocialConnector); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.SocialConnector)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MockOAuthConnectorRegistry) GetAll() []*connector.SocialConnector {
	ret := _m.Called()

	var r0 []*connector.SocialConnector
	if rf, ok := ret.Get(0).(func() []*connector.SocialConnector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*connector.SocialConnector)
		}
	}

	return r0
}

// Register provides a mock function with given fields: provider, _a1
func (_m *MockOAuthConnectorRegistry) Register(provider string, _a1 *connector.SocialConnector) {
	_m.Called(provider, _a1)
}

type mockConstructorTestingTNewMockOAuthConnectorRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOAuthConnectorRegistry creates a new instance of MockOAuthConnectorRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOAuthConnectorRegistry(t mockConstructorTestingTNewMockOAuthConnectorRegistry) *MockOAuthConnectorRegistry {
	mock := &MockOAuthConnectorRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
